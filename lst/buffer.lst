C51 COMPILER V9.03   BUFFER                                                                12/07/2014 19:07:44 PAGE 1   


C51 COMPILER V9.03, COMPILATION OF MODULE BUFFER
OBJECT MODULE PLACED IN .\obj\buffer.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe src\buffer.c LARGE ROM(COMPACT) OPTIMIZE(9,SIZE) BROWSE INCDIR(.\inc) DEBUG
                    - OBJECTEXTEND PRINT(.\lst\buffer.lst) OBJECT(.\obj\buffer.obj)

line level    source

   1          /**
   2           * @file                :buffer.c
   3           * @brief               :Se crea una cola para el manejo de datos y se realiza
   4           * el promedio, agregar a cola y sacar de cola
   5           * @version     : 1.3
   6           * @date        : 24/11/2014
   7           * @author      : by_Ra!
   8          ===============================================================================
   9          */
  10          
  11          #include "buffer.h"
  12          
  13          /*--------------Declaracion de variables locales---------------*/
  14          
  15           _BUFFER bm; //ver si hace falta agregar volatile 
  16           UNS_32 memoria[_VALORES_RPM_N]; //ultimos valores medidos
  17          // _CORRECCION correc; //puntos de interes para correciones
  18           /**********************************************************************
  19           * @brief       
  20           * @param[in]   none
  21           * @return      UNS_16 las rpm para mostrar en display
  22           * Note : 
  23           *********************************************************************/
  24          UNS_32 _BUFFER_RPM()
  25          {
  26   1              UNS_32 promedio = 0, rpm;
  27   1              UNS_8 contador;
  28   1              bit ajuste = OFF;
  29   1              
  30   1              //Es necesario afectar las cuentas?
  31   1              for(contador=0;contador<bm.BufferSize_N;contador++)
  32   1              {
  33   2                      if(bm.cuenta[contador] > 1000000)
  34   2                      { 
  35   3                              ajuste = ON;
  36   3                              break;
  37   3                      }
  38   2              }
  39   1              
  40   1              //Afectamos de ser necesario
  41   1              if(ajuste)
  42   1              {
  43   2                      contador = bm.BufferSize_N;
  44   2                      while(contador)
  45   2                      {
  46   3                              bm.cuenta[contador-1] /= 100; //Dividimos sobre 100
  47   3                              contador--;
  48   3                      }
  49   2              }
  50   1              
  51   1              //Realizamos el promedio
  52   1              contador = __BUF_MASK(bm.BufferSize_N);
  53   1              while(contador)                 
  54   1              {
C51 COMPILER V9.03   BUFFER                                                                12/07/2014 19:07:44 PAGE 2   

  55   2                      promedio += bm.cuenta[contador--];
  56   2              }
  57   1              promedio += bm.cuenta[0]; //El ultimo lo cargamos a mano
  58   1              promedio /= bm.BufferSize_N;      //Divido sobre la cantidad N
  59   1              promedio *= FACTORdeCORRECCION1; //904
  60   1              promedio /= FACTORdeCORRECCION2; //10000 (una decada mas para cortar el decimal)
  61   1              if(ajuste){promedio*= 100;}      //Lo devolvemos al valor original
  62   1              rpm = (__SEGtoRPM/promedio);
  63   1              __BUF_RESET(bm.idx);    //reseteamos el indice
  64   1              return (UNS_32) rpm;
  65   1      }
  66          
  67          /********************************************************************//**
  68           * @brief       
  69           * @param[in]   none
  70           * @return      TRUE:cargo dato; FALSE: No cargo dato
  71           * Note : Primero chequeamos que le buffer no esta lleno
  72           *********************************************************************/
  73          bit _BUFFER_Send(UNS_16 veces, UNS_16 cuenta)
  74          {
  75   1              UNS_32 aux = 0;
  76   1              if (!__BUF_IS_FULL(bm.idx,bm.BufferSize_N))     //si NO esta lleno el buffer
  77   1              { 
  78   2                      aux = veces;
  79   2                      aux *= 50000;
  80   2                      bm.cuenta[bm.idx++] = aux + cuenta;     //Guardamos y post incrementamos
  81   2              }else
  82   1              {
  83   2                      return  FALSE;
  84   2              }
  85   1              return TRUE;
  86   1      }
  87          
  88          /********************************************************************//**
  89           * @brief       Devuelve la cantidad de elementos en el array
  90           * @param[in]   none
  91           * @return              UNS_8 cantidad de elementos
  92           * Note : -
  93           *********************************************************************/
  94          UNS_8 _BUFFER_Nelements()
  95          {
  96   1              return (bm.idx);
  97   1      }
  98          
  99          /********************************************************************
 100           * @brief Inicializa el buffer y su indice, los carga con 0
 101           * @param[in]   none
 102           * @return              none
 103           * Note: -
 104           *********************************************************************/
 105          void _BUFFER_Init(void)
 106          {
 107   1              for(bm.idx = 0; bm.idx < BUFSIZE_N_MAX;bm.idx++)  
 108   1              {
 109   2                      bm.cuenta[bm.idx] = 0;
 110   2              }
 111   1              bm.idx = 0; // Limpia indice
 112   1              bm.BufferSize_N = BUFSIZE_N_MAX; //Valor por defecto, pueden ser menos cuentas
 113   1      }
 114          
 115          /********************************************************************
 116           * @brief Inicializa el buffer y su indice, los carga con 0
C51 COMPILER V9.03   BUFFER                                                                12/07/2014 19:07:44 PAGE 3   

 117           * @param[in]   none
 118           * @return              none
 119           * Note: -
 120           *********************************************************************/
 121          void _MEMORIA_Init(void)
 122          {
 123   1              UNS_8 contador = 0;
 124   1              for(contador = 0; contador<_VALORES_RPM_N;contador++)  
 125   1              {
 126   2                      memoria[contador] = 0;
 127   2              }
 128   1      }
 129          /* --------------------------------- End Of File ------------------------------ */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    461    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    482      11
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
